#trains model on data formatted and generated by data collector file

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import pickle

# Load the CSV
data = pd.read_csv('lol_training_data.csv')

X = data.drop(['match_id', 'timestamp_min', 'blue_win'], axis=1)
y = data['blue_win']




X_train, X_test, y_train, y_test = train_test_split(
    X, y, 
    test_size=0.2,    
    random_state=42   
)


scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


model = LogisticRegression(max_iter=1000)
model.fit(X_train_scaled, y_train)

# print(model.score(X,y))


train_predictions = model.predict(X_train_scaled)
train_accuracy = accuracy_score(y_train, train_predictions)

test_predictions = model.predict(X_test_scaled)
test_accuracy = accuracy_score(y_test, test_predictions)

# print("\n Model Performance:")
# print(f"Training Accuracy: {train_accuracy:.2%}")
# print(f"Testing Accuracy:  {test_accuracy:.2%}")

# print("\n Detailed Test Results:")
# print(classification_report(y_test, test_predictions, 
#                           target_names=['Red Win', 'Blue Win']))


# Save model
with open('league_win_predictor.pkl', 'wb') as f:
    pickle.dump(model, f)

# Save scaler (IMPORTANT!)
with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)

# print("\nðŸ’¾ Model Saved!")
# print("Files created:")
# print("  - league_win_predictor.pkl")
# print("  - scaler.pkl")

sample_game = X_test.iloc[0:1]  # First test game
sample_game_scaled = scaler.transform(sample_game)

prediction = model.predict(sample_game_scaled)[0]
probability = model.predict_proba(sample_game_scaled)[0]

print("\nðŸŽ® Sample Prediction:")
print(f"Game stats:\n{sample_game.iloc[0]}")
print(f"\nPrediction: {'Blue Wins' if prediction == 1 else 'Red Wins'}")
print(f"Confidence: Blue {probability[1]:.1%} | Red {probability[0]:.1%}")
print(f"Actual result: {'Blue Won' if y_test.iloc[0] == 1 else 'Red Won'}")